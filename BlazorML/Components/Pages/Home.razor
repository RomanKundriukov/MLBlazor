@* @page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using System.Net.Mail
@using Microsoft.ML
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<div class="container">
    <div class="row">
        <div class="col col-6 d-flex flex-column justify-content-between">
            <InputFile type="senden" OnChange="@HandleImageUpload" multiple />
            <img src="@imagePath" alt="Foto" style="height: 480px; width: 640px; margin-top: 3em;" />
        </div>
        <div class="col col-6 d-flex flex-column justify-content-center">
            <label>@result</label>
        </div>
    </div>
</div>


@code {
    private List<IBrowserFile> loadedFiles = new();
    private string imagePath = "";
    private string result = "kein Foto";

    MLContext mlContext = new MLContext();
    DataViewSchema predictionPipelineSchema;


    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }


    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {

                //var trustedFileName = $"{Path.GetRandomFileName()}.png";
                //var uploadsFolder = Path.Combine(Environment.ContentRootPath, "unsafe_uploads");

                // Überprüfen und Erstellen des Ordners, falls er nicht existiert
                // if (!Directory.Exists(uploadsFolder))
                // {
                //     Directory.CreateDirectory(uploadsFolder);
                // }

                // var path = Path.Combine(uploadsFolder, trustedFileName);
                // var path = Path.Combine(Environment.ContentRootPath,
                //     Environment.EnvironmentName, "unsafe_uploads",
                //     trustedFileName);

                // await using FileStream fs = new(path, FileMode.Create);
                // await file.OpenReadStream().CopyToAsync(fs);


                var memStream = new MemoryStream();
                await file.OpenReadStream(file.Size).CopyToAsync(memStream);
                byte[] imageBytes = memStream.ToArray();
                imagePath = $"data:{file.ContentType};base64,{Convert.ToBase64String(memStream.ToArray())}";

                Foto.ModelInput input = new Foto.ModelInput
                    {
                        ImageSource = imageBytes
                    };

                Foto.ModelOutput output = Foto.Predict(input);

                result = $"Die Maschine ist: {output.PredictedLabel}";

                loadedFiles.Add(file);
                await InvokeAsync(StateHasChanged);

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

        }

    }
} *@

@page "/"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.ML
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="container">
    <div class="row">
        <div class="col col-6 d-flex flex-column justify-content-between">
            <InputFile type="senden" OnChange="@HandleImageUpload" multiple />
            <img src="@imagePath" alt="Foto" style="height: 480px; width: 640px; margin-top: 3em;" />
        </div>
        <div class="col col-6 d-flex flex-column justify-content-center">
            <label>@result</label>
        </div>
    </div>
</div>

@code {
    private List<IBrowserFile> loadedFiles = new();
    private string imagePath = "";
    private string result = "kein Foto";
    float percentage;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                // Загрузка изображения как массива байтов
                var memStream = new MemoryStream();
                await file.OpenReadStream(file.Size).CopyToAsync(memStream);
                byte[] imageBytes = memStream.ToArray();
                imagePath = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";

                // Подготовка входных данных для модели
                // var input = new MLModel.ModelInput
                //     {
                //         Label = "Label0",
                //         ImageSource = imageBytes // Замените на правильное свойство, если нужно
                //     };

                // Предсказание с использованием PredictionEnginePool
                // var output = MLModel.Predict(input);

                // result = $"Die Maschine ist: {output.PredictedLabel}";

                MLModel.ModelInput input = new MLModel.ModelInput
                    {
                        ImageSource = imageBytes
                    };

                MLModel.ModelOutput output = MLModel.Predict(input);

                

               
                var scores = output.Score;
                float sum = 0;
                for (int i = 0; i < scores.Length; i++)
                {
                    sum += scores[i];
                }

                float maxScore = float.MinValue;
                int predictedLabelIndex = -1;

                for (int i = 0; i < scores.Length; i++)
                {
                    percentage = (scores[i] / sum) * 100; // Normalisierung und Umwandlung in Prozent
                    Console.WriteLine($"Klasse {i}: {percentage:F2}%");

                    // Finden des Indexes der höchsten Punktzahl
                    if (scores[i] > maxScore)
                    {
                        maxScore = scores[i];
                        predictedLabelIndex = i;
                    }
                }
                float maxPercentage = maxScore * 100; // In Prozent umwandeln
                string formattedMaxPercentage = maxPercentage.ToString("F2"); // Formatieren auf 2 Dezimalstellen
                result = $"Die Maschine ist: {output.PredictedLabel} - {formattedMaxPercentage}%";

                loadedFiles.Add(file);
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }
    }
}
